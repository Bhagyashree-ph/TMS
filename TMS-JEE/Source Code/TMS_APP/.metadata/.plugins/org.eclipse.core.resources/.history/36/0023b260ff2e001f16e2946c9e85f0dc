package training.iqgateway.dao.impl;

import java.util.List;

import org.hibernate.query.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import training.iqgateway.dao.CustomerDAO;
import training.iqgateway.entities.CustomerEO;
import training.iqgateway.util.*;

public class CustomerDAOImpl implements CustomerDAO {

	@Override
	public Integer addCustomer(CustomerEO CustomerEORef) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		Transaction txn = sessionRef.getTransaction();
		txn.begin();
		Integer returnedID = (Integer) sessionRef.save(CustomerEORef);
		txn.commit();
		sessionRef.close();
		return returnedID;
	}

	@Override
	public void updateDepartment(CustomerEO CustomerEORef) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().getCurrentSession();
		Transaction txn = sessionRef.getTransaction();
		txn.begin();
		sessionRef.update(CustomerEORef);
		txn.commit();
		sessionRef.close();
	}

	@Override
	public void deleteDepartment(Integer givenDepartmentID) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		Transaction txn = sessionRef.getTransaction();

		CustomerEO foundDeptRef = sessionRef.get(CustomerEO.class, givenDepartmentID);
		if (foundDeptRef != null) {
			txn.begin();
			sessionRef.delete(foundDeptRef);
			txn.commit();
		}
		sessionRef.close();
	}

	@Override
	public CustomerEO findDepartmentByID(Integer givenDepartmentID) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		CustomerEO foundCustomerEO = sessionRef.get(CustomerEO.class, givenDepartmentID);
		sessionRef.close();
		return foundCustomerEO;
	}

	@Override
	public List<CustomerEO> findAll() {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		Query queryRef = sessionRef.getNamedQuery("findAllDepts");
		List<CustomerEO> returnedDeptList = queryRef.list();
		sessionRef.close();
		return returnedDeptList;
	}

	@Override
	public List<CustomerEO> findDepartmentNameAndManagerID() {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		Query queryRef = sessionRef.createQuery("findNameAndMgr");
		List<CustomerEO> depts = queryRef.getResultList();
		return depts;
	}

	@Override
	public List<CustomerEO> findDepartmentByName(String givenDeptName) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		String findQueryByName = "select deptRef from CustomerEO deptRef where deptRef.departmentName= :dName";
		
		Query queryRef = sessionRef.createQuery(findQueryByName);
		queryRef.setParameter("dName", givenDeptName);
		
		List<CustomerEO> depts = queryRef.getResultList();
		return depts;
	}

	@Override
	public List<CustomerEO> findDeptByGivenLocationID(Integer givenLocationID) {
		// TODO Auto-generated method stub
		Session sessionRef = HibernateUtil.getSessionFactory().openSession();
		String findQueryBylocation = "select deptRef from CustomerEO deptRef where deptRef.locationId= :dLocation";
		
		Query queryRef = sessionRef.createQuery(findQueryBylocation);
		queryRef.setParameter("dLocation", givenLocationID);
		
		List<CustomerEO> depts = queryRef.getResultList();
		return depts;
	}

}
